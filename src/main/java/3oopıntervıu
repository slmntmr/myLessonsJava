
     OOP (Object Oriented Programming -  Nesne TabanlÄ± Programlama )

        GerÃ§ek hayatta gÃ¶rdÃ¼ÄŸÃ¼mÃ¼z birÃ§ok Object'in (nesnenin) bilgisayar ortamÄ±na aktarÄ±lma ÅŸeklidir.
        Yani bir object'in rengi, durumu, ismi, Ã¼retim yÄ±lÄ± gibi birÃ§ok Ã¶zelliklerin bilgisayar
         ortamÄ±nda gÃ¶sterilmesi buna Ã¶rnek olarak verilebilir.

        Object YÃ¶nelimli ProgramlamanÄ±n FaydalarÄ±:

        1) Object oluÅŸturma bir Class iÃ§erisinde toplanÄ±r ve tÃ¼m projelerde kullanÄ±labilirliÄŸe olanak saÄŸlar.(String gibi)
        2) Class'larin 1 kez oluÅŸturulmasÄ± sayesinde uzun kodlarÄ± tekrardan yazmak yerine kÄ±sa kodlamalar
        ile Ã§alÄ±ÅŸtÄ±rÄ±labilir. Substring() methodâ€™u 1 kere yazilmis ama surekli kullanabiliyoruz.
        3) Uzun kodlarÄ±n tekrar yazÄ±lmasÄ±nÄ±n engellenmesi sayesinde geliÅŸtirme sÃ¼reci kÄ±salÄ±r.
        4) Object'ler birbirinden baÄŸÄ±msÄ±z olduÄŸundan bilgi gizliliÄŸi konusunda avantaj saÄŸlar.
        5) Class'lar sayesinde tÃ¼m projelerde deÄŸiÅŸiklik yapmak yerine tek bir classâ€™ ta deÄŸiÅŸiklik
        yapÄ±lÄ±p tÃ¼m projelerde Ã§alÄ±ÅŸmasÄ± saÄŸlanÄ±r. Bu zaman kaybÄ±nÄ± bÃ¼yÃ¼k Ã¶lÃ§Ã¼de azaltÄ±r.*/

         OOPâ€™leri 4 temel Ã¶zellikte inceleyebiliriz.
        1. Inheritance - Miras Alma
        2. Polymorphism - Ã‡ok BiÃ§imlilik
        3. Encapsulation - KapsÃ¼lleme
        4. Abstraction - Soyutlama


         1. Inheritance - Miras Alma

        Ozellikleri bir class'tan diÄŸer class'lara alan bir kavramdÄ±r.
        Siz bir class olusturacaksiniz ama daha once olusturulmus bir class sizin istediginiz ozelliklerin bir cogunu
        kapsiyor. O zaman direkt olusturdugunuz class'i, ozelliklerini kullanmak istediginiz class'a "child" yaparsiniz
        Bunu da "extends - uzanir" keyword'unu kullanarak yapiyoruz

        Inheritanceâ€™in Faydalari nelerdir?

        1) Kodun yeniden kullanÄ±lmasÄ±na yardÄ±mcÄ± olur.
        2) Ana kodun tekrar yazÄ±lmasÄ±na gerek olmadÄ±ÄŸÄ± iÃ§in, daha az kod yazarak, zamandan ve
        emekten tasarruf saÄŸlayabiliriz.
        3) Kolayca update yapabiliriz.
        4) Classâ€™lari kuculturuz.
        5) Daha az geliÅŸtirme ve bakÄ±m maliyetine yol aÃ§ar.


      2. Abstraction(Soyut)

    Abstraction iki bolumden olusur.

    i) Abstract Class:

    Soyutlama (Abstraction):
    KullanÄ±cÄ±ya arka planda olan karÄ±sÄ±k Ä±slemlerÄ±Ä±n gosterÄ±lmemesÄ± ve sadeleÅŸtirilmesi iÃ§in kullanÄ±lan bir
    tekniktir.Bir iÅŸin ne yaptÄ±ÄŸÄ±nÄ± biliriz(metod var), ancak nasÄ±l yapÄ±ldÄ±ÄŸÄ±(metod badÄ±sÄ± yok) ile ilgilenmeyiz. Yani iÅŸimize yarayacak
    kadar bilgi sahibi oluruz.
    Ortak Ã–zellikleri Gruplama:
    Abstract Class, ortak Ã¶zelliklere sahip nesneleri gruplandÄ±rmak iÃ§in kullanÄ±lÄ±r.Bu sayede kod tekrarÄ±nÄ± Ã¶nler ve sÄ±nÄ±f yapÄ±sÄ±nÄ± dÃ¼zenler.
    Base Class Olarak Davranma:
    Abstract Class, sadece base class olarak davranmasÄ±nÄ± (yani inherit edilebilmesini) ve kendisinden nesne Ã§Ä±kartÄ±lmamasÄ±nÄ±
    istediÄŸimiz durumlarda kullanÄ±lÄ±r.Alt sÄ±nÄ±flar bu Abstract Classâ€™Ä± miras alarak kullanabilir.

       1)Abstract method'larin body'si olmaz.Size ne yaptigini soyler,nasil yaptigini soylemez.
        Kendisinden object olusturulmaz.
       2)Body'si olan method'lara 'non-abstract' veya â€˜concrete' (somut) method denir

       3)Abstract method'lar tum child class'lar tarafindan override edilmelidir yani kullanilmalidir.

       4)Abstract method'lar ancak abstract class'lar icinde olusturulabilir.

       5)Abstract class'lar hem 'abstract method' hem de 'concrete methodâ€™ icerebilirler.

       6)Concrete method'lar child class'lar tarafindan istenirse override edilebilirler



        8) Abstract bir classâ€™in abstract bir childâ€™i olabilir ve abstract child parentâ€™inin
        methodlarini override etmek zorunda degildir ama isterse de edebilir

        9) Abstract bir class private olamaz yoksa childâ€™lari ona ulasip override edemez.


    3.Encapsulation: Data hiding(Veri Saklama)

    OOP mantiginda class uyelerine erisimi sinirlandirabilirsiniz.
    Bunu access modifier(eriÅŸim deÄŸiÅŸtiricileri) larla yapabilirsiniz

    Ama classâ€™a ulasim disinda â€˜access modifierâ€™ larla yapamadigimiz bazi seyleri â€˜encapsulationâ€™ ile yapabiliriz.

    1) Encapsulation, verileri koruma ve gizleme amacÄ± taÅŸÄ±r. encapsulation kullanarak
    read ve write (okuma ve yazma) ozelliklerini birbirinden ayri olarak tanimlayabiliriz.
    2) Ä°stedigimize okuma, istedigimize yazma yetkisi veririz. ***Bazi insanlar bilgiyi sadece
    gorsun ama degistiremesin. (Mesela,bir personel bir rapora fiyat bilgisi girsin-write-
    ama rapor sonucunu(sirket kar zararini) goremesin. Sirket muduru de raporu okusun -read- ama degistiremesin.
    CEOâ€™da maliyet artislarini yansitabilmek icin hem okusun hemde yazsin gibi)

    a) Data nasil saklanir?
    Access modifier'larini 'private' yaparak datayi diger class'lardan gorunmez hale getiririm
    boylece data'yi saklamis olurum.

    b) Data'yi sakladin ama okuman gerekirse ne yapacaksin?
    get() method'lar olusturarak saklanmis datalari diger class'lardan okuyabilirim

    c) Data'yi sakladin ama o data'yi degistirmen gerekirse ne yapacaksin?
    set() method'lar olusturarak saklanmis datalari diger class'lardan degistirebilirim

    d)Hem okunabilir hemde yazilabilsin diyorsaniz, hem getter hemde setter methodâ€™u ayni anda olusturmaliyiz.


      4.Interface
  Interface (arayÃ¼z), class'larin uygulayabileceÄŸi bir "sÃ¶zleÅŸme" olarak dÃ¼ÅŸÃ¼nÃ¼lebilir.

     Bir interface, bir veya daha fazla abstract method iÃ§erir ve
    bu methodlarÄ±n imzalarÄ±nÄ± (adlarÄ±nÄ± ve parametrelerini) belirtir,
    ancak bu methodlarÄ±n nasÄ±l uygulanacaÄŸÄ±nÄ± tanÄ±mlamaz.
    Class'lar, bu interface'leri uygulayarak (implement ederek) bu methodlarÄ±
    kendi ihtiyaÃ§larÄ±na gÃ¶re tanÄ±mlarlar.

    i) interface icindeki methodâ€™lar otomatik olarak â€˜publicâ€™ dir,
     bu yuzden interfaceâ€™lerde method olustururken access modifier yazmayiz.(static degillerdir)
    ii) interface icindeki methodâ€™lar otomatik olarak â€˜abstractâ€™ dir, bu yuzden interfaceâ€™lerde
     abstract method olustururken â€˜abstractâ€™ keywordâ€™unu ve â€˜method bodyâ€™ sini yazmayiz.

             a) interfaceâ€™leri parent yapmak icin â€˜implementsâ€™ keywordâ€™u child icinde kullanilir
             b) extends kullanilmaz cunku bu iki class arasinda kullanili
             f)Interface'lerden object uretemezsiniz

             Interface ve Abstract Class arasÄ±ndaki farklarÄ± inceleyelim:

             Abstract Class (Soyut SÄ±nÄ±f):
             Abstract sÄ±nÄ±flar, soyutlama amacÄ±yla kullanÄ±lÄ±r.
             Hem abstract hem de non-abstract (normal) metotlarÄ± iÃ§erebilir.
             Bir sÄ±nÄ±f sadece bir abstract sÄ±nÄ±fÄ± inherit edebilir.
             Abstract sÄ±nÄ±fÄ±n bir implementasyonu olabilir.

             Interface:
             Interfaceâ€™ler, bir sÄ±nÄ±fÄ±n belirli metotlarÄ± implemente etmesini zorlar.
             Sadece abstract metotlarÄ± iÃ§erebilir.
             Bir sÄ±nÄ±f birden fazla interfaceâ€™i inherit edebilir.
             Interfaceâ€™lerin tÃ¼m Ã¼yeleri public ve abstract olarak kabul edilir.

             KullanÄ±m SenaryolarÄ±:
             Abstract sÄ±nÄ±flar, benzer sÄ±nÄ±flar iÃ§in temel bir yapÄ± saÄŸlamak iÃ§in kullanÄ±lÄ±r.
             Interfaceâ€™ler, sÄ±nÄ±flarÄ±n belirli yeteneklerini tanÄ±mlamak iÃ§in kullanÄ±lÄ±r.
             Ã–zetle, abstract sÄ±nÄ±flar daha fazla iÅŸlevsellik saÄŸlayabilirken, interfaceâ€™ler sÄ±nÄ±flarÄ±n yeteneklerini tanÄ±mlar.
             Hangisini kullanmanÄ±z gerektiÄŸi, projenizin gereksinimlerine baÄŸlÄ±dÄ±r. ðŸ˜Š


     Access Modifier (Erisim belirleyici)
        Java'da 1.public, 2.protected, 3.default, 4.private
             1)public
             2)protected
             3)default
             4)private

             public > protected > default > private

             public      ==>  public olanlar her classâ€™dan kullanilabilir
             protected   ==> protected olanlar baska packageâ€™lardan kullanilamaz,
                         ancak baska packageâ€™larda child classlar icinden kullanilabilir
             default     ==> default olanlar baska packageâ€™lardan kullanilamazlar
             private     ==> private olanlar sadece olusturulduklari class icinden kullanilabilirler

             "protected ile default" arasindaki farki sÃ¶yleyiniz?
             Not ==> protected olanlar baska packageâ€™lardan kullanilamaz ancak baska packageâ€™larda
             child classlar icinden kullanilabilir. default olanlar baska packageâ€™lardan kullanilamazlar